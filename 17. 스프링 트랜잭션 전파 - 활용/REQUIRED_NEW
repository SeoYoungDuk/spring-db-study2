//회원데이터는 저장되고, 로그는 롤백 할때 사용
// 커넥션 2개 사용하게 되기 때문에 주의해야한다.
//사용하지 않으려면 어떻게 해야할까 ?
// 트랜잭션 자체를 분리함.
                
// MemberFacade - memberservice(트랜잭션 1)
                - logRepository(트랜잭션 2)
public class MemberServiceTest {
  @AutoWired
  private MemberService memeberService;
  @AutoWired
  private MemberRepository memberRepository;
  @AutoWired
  private LogRepository logRepository;

  @Test
  public void recoverExceptionSuccess() {
    String username = "로그 예외 recoverExceptionSuccess";
    
    assertThatThrownBy(() -> memberService.joinV2(username)).isInstanceOf(UnexpecedRollbackException.class);
    AssertTrue(memberRepository.find(username).isPresent());
    AssertTrue(logRepository.find(username).isEmpty()));
  }
  }
} 

public class MemberService {
  private final MemberRepository memberRepository;
  private final LogRepository logRepository;
  
  @Transactional
  public void joinV1(Strign userName) {
    Member member = new Member(username);
    Log logMessage = new Log("로그 예외");

    memberRepository.save(member);
    logRepository.save(logMessage);
  }

  public void joinV2(Strign userName) {
    Member member = new Member(username);
    Log logMessage = new Log("로그 예외");

    memberRepository.save(member);
    try {
      logRepository.save(logMessage);
    }
    catch (RuntimeException e) {
      log.info("log 저장에 실패 했습니다. logMesseage : {}, logMessage.getMesseage());
      log.info("정상 흐름 반환);
    }
  }
} 

public class MemberRepository {
  private final EntityManager em,
  
  @Transactional
  public void save() {
    log.info(member 저장);
    em.persist(member);
  }

  public Optional<Member> find(String username) {
    
  }

}

public class LogService {
  private final LogRepository logReppository,
  
  @Transactional
  public void save() {
    log.info(member 저장);
    em.persist(member);
  }

  public Optional<Member> find(String username) {
    
  }

}

public class LogRepository {
  private final EntityManager em,
  
  @Transactional(propagation = REQUIRES_NEW)
  public void save(Log logMessage) {
    log.info(log 저장);
    em.persist(logMessage);
    if(logMessage.getMessage().contains("로그 예외")) {
      throw new RuntimeException();
    }
  }

  public Optional<Member> find(String username) {
    
  }

}
