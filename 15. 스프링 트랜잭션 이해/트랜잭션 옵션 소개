value, transactionManager
생각해보면 코드로 직접 태랜잭션을 사용 할때 트랜잭션 매니저를 주입 받아서 사용했다.
이값을 생략하면 기본으로 등록된 트랜잭션 매니저를 사용한다.
둘 이상 될때는 매니저의 이름을 지정해서 구분하면 된다.

@Transactional("memberTxManager")
@Transactional("orderTxManager")

rollbackFor
예외 발생시 스프링 기본 정책은 다음과 같다.
언체크 예외가 발생하면 롤백
체크 예왜는 커밋
@Transactional(rollbackFor = Exception.class) -> 체크 예외도 롤백 됨
noRollbackFor

propagation

isolation 
데이터베이스 격리수준을 직접 지정하는 경우는 드물다

timeout

label
태깅 할 때 사용

readOnly
트랜잭션은 기본적으로 읽기 쓰기가 모두 가능함
readOnly=true 옵션 사용하면 읽기전용 트랜잭션이 생성됨
"readOnly 사용하면 읽기에서 다양한 성능 최적화가 발생함"

readOnly옵션은 크게 3가지에서 적용된다.

프레임워크
JdbcTemplate은 읽기 전용 트랜잭션 안에서 변경기능을 실행하면 예외 던진다.
JPA는 읽기전용 트랜잭션의 경우 커밋시점에 플러시 호출하지 않는다.
추가로 변경할필요 없으니 스냅샷 객체도 생성 안함.

JDBC 드라이버
읽기전용 트랜잭션에서 변경 쿼리가 발생하면 예외를 던진다.
읽기, 쓰기(마스터 슬레이브) 데이터 베이스를 구분해서 요청한다.
읽기전용 트랜잭션의 경우 읽기(슬레이브) 데이터 베이스 커넥션을 획득해서 사용한다.

데이터베이스
데이터베이스에 따라 읽기 전용 트랜잭션의 경우 읽기만 하면 되므로, 성능 최적화가 발생한다.
