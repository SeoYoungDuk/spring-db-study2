체크 예외
비즈니스 의미가 있을때 사용

언체크 예외
복구 불가능한 예외 -> 디비 에러, 네트워크 에러

비즈니스가 의미가 있는 예외란 멀까?
주문 시스템을 만들 때 
정상 시: 결제 상태 완료로 처리
시스템 오류 발생 시: 전체 롤백
비즈니스 예외 :결제 잔고가 부족하면 결제 상태를 대기 로 처리 -> 주문데이터를 다 롤백하면 안됨!

class NotEnoughMoneyException extends Exception {
  public NotEnoughMoneyException(String message) {
    super(message);
  }
}

@Table(name = "orders")
@Entity
@Getter
@Setter
class Order {
  @Id
  @GeneratedValue
  private Long id;
  private String userName;
  private String payStatus;
}

class OrderRepository extends JpaRepository<Order, Long> {}

class OrderService {
  private final OrderRepository orderRepository;

  //JPA는 트랜잭션 커밋 시점에 Order 데이터를 DB에 반영한다.
  @Transactional
  public void order(Order order) {
    log.info("order 호출");
    orderRepository.save(order);

    log.info("결제 프로세스 진입");
    if(order.getUserName().equals("예외")) {
      throw new RuntimeException("시스템 예외");
    } else if(order.getUserName().equals("잔고부족")) {
      order.setPayStatus("대기");
      throw new NotEnoughMoneyException("잔고가 부족합니다");
    } else {
      order.setPayStatus("완료");
    }
  }
}

@Slf4j
@SpringBootTest
class OrderServiceTest {
  @AutoWired OrderService orderService;
  @AutoWired OrderRepository orderRepository;
  
  @Test
  void complete() {
    Order order = new Order();
    order.setUserName("정상");
    
    orderService.order(order);

    Order findOrder = orderRepsitory.findById(order.getid()).get();
    assertThat(findOrder.getPayStatus()).isEqualTo("완료");
  }

  @Test
  void runtimeException() {
    Order order = new Order();
    order.setUserName("예외");
    
    Assertions.assertThatThorwnBy(() -> orderService.order(order))
                                  .isInstanceOf(RuntimeException.class);

    Optional<Order> orderOptional = orderRepsitory.findById(order.getid()).get();
    assertThat(orderOptional.isEmpty()).isTrue();
  }
  
  @Test
  void bizException() {
    Order order = new Order();
    order.setUserName("잔고부족");

    try {
    Assertions.assertThatThorwnBy(() -> orderService.order(order))
                                  .isInstanceOf(RuntimeException.class);
    } catch (NotEnuoghMoneyException e) {
      log.info("고객에게 잔고 부족을 알리고 별도의 계좌로 입금하도록 안내");
    }

    <Order findOrder = orderRepsitory.findById(order.getid()).get();
    assertThat(findOrder.getPayStatus()).isEqualTo("대기");
  }
  
}
