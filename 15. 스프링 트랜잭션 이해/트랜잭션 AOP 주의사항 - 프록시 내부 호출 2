public class InternalCallV2Test {
  @Autowired
  CallService callService;
  
  @Test
  public void test() {
    callService.external(); //트랜잭션 시작했다 라는 로그 안찍힘
  }
  
  @TestConfiguration
  static class InternalCallV1TestConfig {

    @Bean
    public InternalCallService internalcallService {
      return new InternalCallService();
    }

    @Bean
    public CallService callService {
      return new CallService(internalcallService);
    }
  }

  @RequiredArgumentsConstructor
  static class CallService {
    private final InternalService internalService;
    public void external(){
      printTxinfo();
      internalService.internal();
    }
    @Transactional
    public void internal() {
      printTxInfo();
    }
  }

  @Service
  static class InternalCallService { // 외부 서비스로 빼면 프록시 객체를 주입해 트랜잭션이 제대로 동작함.
    @Transactional
    public void internal() {
      printTxInfo();
    }
  }
}

클라이언트 -> exteranl 호출 -> 트랜잭션 프록시 호출 -> 실제 internal 호출

트랜잭션 AOP 기능은 public 메서드 에서만 기본적으로 트랜잭션을 적용하도록 되어있다.
이유는 클래스 레벨에 트랜잭션 걸면 모든 메서드에 걸릴수 있다.
의도 하지 않은곳 까지 트랜잭션이 과도하게 적용된다. 트랜잭션은 주로 비즈니스로직의 시작점에서 걸기 때문에 
외부에 열어둔 곳을 시작점으로 사용한다. 이런 이유로 public 에만 걸린다.
